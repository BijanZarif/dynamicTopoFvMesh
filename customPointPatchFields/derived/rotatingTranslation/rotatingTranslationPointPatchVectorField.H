/*---------------------------------------------------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     |
    \\  /    A nd           | Copyright held by original author
     \\/     M anipulation  |
-------------------------------------------------------------------------------
License
    This file is part of OpenFOAM.

    OpenFOAM is free software; you can redistribute it and/or modify it
    under the terms of the GNU General Public License as published by the
    Free Software Foundation; either version 2 of the License, or (at your
    option) any later version.

    OpenFOAM is distributed in the hope that it will be useful, but WITHOUT
    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
    FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
    for more details.

    You should have received a copy of the GNU General Public License
    along with OpenFOAM; if not, write to the Free Software Foundation,
    Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA

Class
    rotatingTranslationPointPatchVectorField

Description
    Provide rotating / translating displacement for point fields.

Author
    Sandeep Menon
    University of Massachusetts Amherst
    All rights reserved

SourceFiles
    rotatingTranslationPointPatchVectorField.C

\*---------------------------------------------------------------------------*/

#ifndef rotatingTranslationPointPatchVectorField_H
#define rotatingTranslationPointPatchVectorField_H

#include "fixedValuePointPatchFields.H"

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

namespace Foam
{

/*---------------------------------------------------------------------------*\
          Class rotatingTranslationPointPatchVectorField Declaration
\*---------------------------------------------------------------------------*/

class rotatingTranslationPointPatchVectorField
:
    public fixedValuePointPatchField<vector>
{
    // Private data

        //- Point of rotation
        point rotPoint_;

        //- Axis of rotation
        vector rotAxis_;

        //- Direction vector for translation
        vector transVec_;

        //- Rotation magnitude per time-step
        scalar rotMag_;

    // Private member functions

        //- Rotate points
        void rotatePoints(pointField&);

public:

    //- Runtime type information
    TypeName("rotatingTranslation");


    // Constructors

        //- Construct from patch and internal field
        rotatingTranslationPointPatchVectorField
        (
            const pointPatch&,
            const DimensionedField<vector, pointMesh>&
        );

        //- Construct from patch, internal field and dictionary
        rotatingTranslationPointPatchVectorField
        (
            const pointPatch&,
            const DimensionedField<vector, pointMesh>&,
            const dictionary&
        );

        //- Construct by mapping given patchField<vector> onto a new patch
        rotatingTranslationPointPatchVectorField
        (
            const rotatingTranslationPointPatchVectorField&,
            const pointPatch&,
            const DimensionedField<vector, pointMesh>&,
            const pointPatchFieldMapper&
        );

        //- Construct and return a clone
        virtual autoPtr<pointPatchField<vector> > clone() const
        {
            return autoPtr<pointPatchField<vector> >
            (
                new rotatingTranslationPointPatchVectorField(*this)
            );
        }

        //- Construct as copy setting internal field reference
        rotatingTranslationPointPatchVectorField
        (
            const rotatingTranslationPointPatchVectorField&,
            const DimensionedField<vector, pointMesh>&
        );

        //- Construct and return a clone setting internal field reference
        virtual autoPtr<pointPatchField<vector> > clone
        (
            const DimensionedField<vector, pointMesh>& iF
        ) const
        {
            return autoPtr<pointPatchField<vector> >
            (
                new rotatingTranslationPointPatchVectorField(*this, iF)
            );
        }


    // Member functions

        // Evaluation functions

            //- Update the coefficients associated with the patch field
            virtual void updateCoeffs();


        //- Write
        virtual void write(Ostream&) const;
};


// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

} // End namespace Foam

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

#endif

// ************************************************************************* //
